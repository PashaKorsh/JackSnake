class Snake {
    field int x, y, dx, dy;
    field Queue segments;
    field boolean isEated;

    // Класс змейки, содержит координаты головы и сегментов
    constructor Snake new() {
        let x = 16; let y = 8; let dx = 1;
        let segments = Queue.new(512);
        do segments.enqueue(264);
        return this;
    }

    // Перестройка если погибла
    method void rebuild() {
        let x = 16; let y = 8; let dx = 1; let dy = 0;
        do segments.rebuild();
        do segments.enqueue(264);
        return;
    }

    // Движение в направлении dx dy, изменение карты
    method boolean move(Array map) {
        var int newPos;
        let x = x + dx;
        let y = y + dy;
        if (x = -1) { let x = 31; }
        if (x = 32) { let x = 0; }
        if (y = -1) { let y = 15; }
        if (y = 16) { let y = 0; }
        let newPos = x * 16 + y;

        if (map[newPos] = 1) { return true; }

        do segments.enqueue(newPos);
        let map[newPos] = 1;
        if (~isEated) {
            let map[segments.peek()] = 0;
        }

        return false;
    }

    // Изменение направления
    method void changeDir(int newx, int newy) {
        if (dx * newx = 0) { let dx = newx; }
        if (dy * newy = 0) { let dy = newy; }
        return;
    }

    // Отрисовка головы и стирание хвоста
    method void draw() {
        var int tx,ty;
        do Screen.drawRectangle(x * 16, y * 16, x * 16 + 15, y * 16 + 15);
        if (isEated) {
            let isEated = false;
        } else {
            let tx = segments.peek() / 16;
            let ty = segments.dequeue() - (tx * 16);
            do Screen.setColor(false);
            do Screen.drawRectangle(tx * 16, ty * 16, tx * 16 + 15, ty * 16 + 15);
            do Screen.setColor(true);
        }
        return;
    }

    // Увеличить длину на 1 если зашли на еду
    method boolean eat(int food) {
        if (x * 16 + y = food) {
            let isEated = true;
            return true;
        }
        return false;
    }

    // Отрисовка змейки полностью
    method void drawFull() {
        var int i, tx, ty;
        let i = segments.length() - 1;

        while (~(i = -1)) {
            let tx = segments.getAt(i) / 16;
            let ty = segments.getAt(i) - (tx * 16);
            do Screen.drawRectangle(tx * 16, ty * 16, tx * 16 + 15, ty * 16 + 15);
            let i = i - 1;
        }
        return;
    }
}